_G.stringutils = {}
function stringutils.split(input, sep)
    if sep == nil then
        sep = "%s" --default sep to space
    end

    local t = {}

    for match in string.gmatch(input, "([^" .. sep .. "]+)") do
        table.insert(t, match)
    end

    return t
end

function stringutils.join(data, sep)
    if sep == nil then
        sep = ' '
    end
    if #data == 0 then return "" end
    if #data == 1 then return data[1] end
    local t = data[1]
    for i=2,#data do
        t = t..sep..data[i]
    end
    return t
end

_G.tableutils = {}
function tableutils.getKeys(t)
    local t2 = {}
    local i = 0
    for k, v in pairs(t) do
        i = i + 1
        t2[i] = k
    end
    return t2
end

function tableutils.containsKey(t, key)
    local val = false
    -- print("looking for "..key)
    for k, v in pairs(t) do
        if k == key then
        --    print(v.."=="..key)
            val = true
        --else
        --    print(v.."!="..key)
        end
    end
    return val
end

function tableutils.containsValue(t, key)
    local val = false
    -- print("looking for "..key)
    for k, v in pairs(t) do
        if v == key then
        --    print(v.."=="..key)
            val = true
        --else
        --    print(v.."!="..key)
        end
    end
    return val
end

function tableutils.slice(array, start, _end)
    if _end == nil then
        _end = #array
    end
    results = {}
    local diff = _end - start
    for i=0,diff do
        results[i] = array[i + start]
    end
    return results
end

function tableutils.sortedKeys(t, f)
    local a = {}
    for n in pairs(t) do table.insert(a, n) end
    table.sort(a, f)

    local i = 0  -- iterator variable

    local iter = function ()   -- iterator function
        i = i + 1
        if a[i] == nil then return nil
        else return a[i]
        end
    end
    return iter
end

function tableutils.deepcopy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in next, orig, nil do
            copy[deepcopy(orig_key)] = deepcopy(orig_value)
        end
        setmetatable(copy, deepcopy(getmetatable(orig)))
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end

-- credit: http://www.computercraft.info/forums2/index.php?/topic/11771-print-coloured-text-easily/
-- modified by MTM
function _G.printf(data, _end)
    local s = "&0"
    for k, v in ipairs({data}) do
        s = s .. v
    end
    s = s .. "&0"

    local fields = {}
    local lastcolor, lastpos = "0", 0
    for pos, clr in s:gmatch"()&(%x)" do
        table.insert(fields, {s:sub(lastpos + 2, pos - 1), lastcolor})
        lastcolor, lastpos = clr , pos
    end

    for i = 2, #fields do
        term.setTextColor(2 ^ (tonumber(fields[i][2], 16)))
        io.write(fields[i][1])
    end
    if _end == nil then
        _end = '\n'
    end
    io.write(_end)
    term.setTextColor(colors.white)
end
